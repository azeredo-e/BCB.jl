var documenterSearchIndex = {"docs":
[{"location":"#BrazilCentralBank.jl-Documentation","page":"BrazilCentralBank.jl Documentation","title":"BrazilCentralBank.jl Documentation","text":"","category":"section"},{"location":"","page":"BrazilCentralBank.jl Documentation","title":"BrazilCentralBank.jl Documentation","text":"Welcome to the documentation page!","category":"page"},{"location":"#About-the-Project","page":"BrazilCentralBank.jl Documentation","title":"About the Project","text":"","category":"section"},{"location":"","page":"BrazilCentralBank.jl Documentation","title":"BrazilCentralBank.jl Documentation","text":"Current release: 0.1.0 (2024-03-14)","category":"page"},{"location":"","page":"BrazilCentralBank.jl Documentation","title":"BrazilCentralBank.jl Documentation","text":"Based on the python-bcb package for python, BrazilCentralBank.jl aims to provide the same level of features to the Julia Language. Currently the package can interact with the foreign exchange (FOREX) prices as shows in the time series availiable in the Brazil's Central Bank (BCB) website.","category":"page"},{"location":"","page":"BrazilCentralBank.jl Documentation","title":"BrazilCentralBank.jl Documentation","text":"Right now the project is in its early days and the implementation still resembles a lot the original python project. Future updates include a Currency type for better dealing with currencies as well as the inclusion of other data sources from the BCB's site such as interest rates, inflation, etc.","category":"page"},{"location":"","page":"BrazilCentralBank.jl Documentation","title":"BrazilCentralBank.jl Documentation","text":"The final goal is for this to be a comprehensive set of tools for anyone trying to analyse the brazilian economy using Julia!","category":"page"},{"location":"#Instalation","page":"BrazilCentralBank.jl Documentation","title":"Instalation","text":"","category":"section"},{"location":"","page":"BrazilCentralBank.jl Documentation","title":"BrazilCentralBank.jl Documentation","text":"Source code are avaliable in this project directory, but instalation through Julia's package manager is also avaliable.","category":"page"},{"location":"","page":"BrazilCentralBank.jl Documentation","title":"BrazilCentralBank.jl Documentation","text":"julia> using Pkg; Pkg.add(BrazilCentralBank)","category":"page"},{"location":"#API-Documentation","page":"BrazilCentralBank.jl Documentation","title":"API Documentation","text":"","category":"section"},{"location":"","page":"BrazilCentralBank.jl Documentation","title":"BrazilCentralBank.jl Documentation","text":"BrazilCentralBank\ngetcurrency_list()\ngettimeseries(symbols::Union{String, Array}, start::Union{AbstractTime, AbstractString, Number}, finish::Union{AbstractTime, AbstractString, Number}; side::String=\"side\", groupby::String=\"symbol\")","category":"page"},{"location":"#BrazilCentralBank","page":"BrazilCentralBank.jl Documentation","title":"BrazilCentralBank","text":"The BrazilCentralBank package aims to provide a user interface to Brazil's Central Bank (BCB) web data API.\n\nAUTHOR: azeredo-e@github\nGITHUB: github.com/azeredo-e/BCB.jl\nLICENSE: MIT License\nVERSION: 0.1.0\n\n\n\n\n\n","category":"module"},{"location":"#BrazilCentralBank.getcurrency_list-Tuple{}","page":"BrazilCentralBank.jl Documentation","title":"BrazilCentralBank.getcurrency_list","text":"get_currency_list(;convert_to_utf=true) -> DataFrame\n\nList all avaliables currencies in the BCB API, as well as basic information such as currency code, country of origin, etc.\n\nArgs:\n\nconverttoutf (Bool, optional): By default BCB information comes in the ISO-8859-1 encoding, different from the UTF-8 pattern used by Julia. This argument forces the API result to come in UTF-8,  preventing encoding errors. Defaults to true.\n\nReturns:\n\nDataFrames.DataFrame: DataFrame with all avaliable currencies information.\n\nExamples:\n\njulia> getcurrency_list()\n303×7 DataFrame\n Row │ code   name               symbol    country_code  country_name    type     exclusion_date \n     │ Int32  String             String    Int32         String          String   Date\n─────┼──────────────────────────────────────────────────────────────────────────────────────────\n   1 │     5  AFEGANE AFEGANIST       AFN           132   AFEGANISTAO         A          missing\n                                                ...\n\n\n\n\n\n","category":"method"},{"location":"#BrazilCentralBank.gettimeseries-Tuple{Union{String, Array}, Union{AbstractString, Number, AbstractTime}, Union{AbstractString, Number, AbstractTime}}","page":"BrazilCentralBank.jl Documentation","title":"BrazilCentralBank.gettimeseries","text":"gettimeseries(symbols::Union{String, Array},\n              start::Any,\n              finish::Any,\n              side::String=\"ask\",\n              groupby::String=\"symbol\")\n\nDataFrame with the time series of selected currencies.\n\nArgs:\n\nsymbol (Union{String, Array}): ISO code of desired currencies.\nstart (Union{AbstractTime, AbstractString, Number}): Desired start date. The type are set this way because it can accept any valid input to Dates.Date().\nend (Union{AbstractTime, AbstractString, Number}): Desired end date.\nside (String, optional): Which FOREX prices to return \"ask\" prices, \"side\" prices or \"both\". Defaults to \"ask\".\ngroupby (String, optional): In what way the columns are grouped, \"symbol\" or \"side\".\n\nReturns:\n\nDataFrames.DataFrame: DataFrame with foreign currency prices.\n\nRaises:\n\nArgumentError: Values passed to side or groupby are not valid.\n\nExamples:\n\njulia> gettimeseries(\"USD\", \"2023-12-01\", \"2023-12-10\")\n6×2 DataFrame\n Row │ Date        ask_USD \n     │ Date        Float64\n─────┼─────────────────────\n   1 │ 2023-12-01   4.9191\n   2 │ 2023-12-04   4.9091\n   3 │ 2023-12-05   4.9522\n   4 │ 2023-12-06   4.9031\n   5 │ 2023-12-07   4.8949\n   6 │ 2023-12-08   4.9158\n\n\n\n\n\n","category":"method"}]
}
